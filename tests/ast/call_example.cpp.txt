[AST] /mnt/c/Users/afariasa/Software/cpp-bonsai/tests/input/call_example.cpp
[4:5] FUNCTION_DECL: f 'f()' (TypeKind.FUNCTIONPROTO: int ()) (-> TypeKind.INT: int) [USR:c:@F@f#] [9 tokens] [('int', 'KEYWORD'), ('f', 'IDENTIFIER'), ('(', 'PUNCTUATION'), (')', 'PUNCTUATION'), ('{', 'PUNCTUATION'), ('return', 'KEYWORD'), ('4', 'LITERAL'), (';', 'PUNCTUATION'), ('}', 'PUNCTUATION')]
| [4:9] COMPOUND_STMT: [no spelling] [5 tokens] [('{', 'PUNCTUATION'), ('return', 'KEYWORD'), ('4', 'LITERAL'), (';', 'PUNCTUATION'), ('}', 'PUNCTUATION')]
| | [4:11] RETURN_STMT: [no spelling] [2 tokens] [('return', 'KEYWORD'), ('4', 'LITERAL')]
| | | [4:18] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('4', 'LITERAL')]
[6:8] FUNCTION_DECL: g 'g(double)' (TypeKind.FUNCTIONPROTO: double (double)) (-> TypeKind.DOUBLE: double) [USR:c:@F@g#d#] [13 tokens]
| [6:17] PARM_DECL: x 'x' (TypeKind.DOUBLE: double) [USR:c:call_example.cpp@105@F@g#d#@x] [2 tokens] [('double', 'KEYWORD'), ('x', 'IDENTIFIER')]
| [6:20] COMPOUND_STMT: [no spelling] [7 tokens] [('{', 'PUNCTUATION'), ('return', 'KEYWORD'), ('x', 'IDENTIFIER'), ('*', 'PUNCTUATION'), ('10', 'LITERAL'), (';', 'PUNCTUATION'), ('}', 'PUNCTUATION')]
| | [6:22] RETURN_STMT: [no spelling] [4 tokens] [('return', 'KEYWORD'), ('x', 'IDENTIFIER'), ('*', 'PUNCTUATION'), ('10', 'LITERAL')]
| | | [6:29] BINARY_OPERATOR: [no spelling] (TypeKind.DOUBLE: double) [3 tokens] [('x', 'IDENTIFIER'), ('*', 'PUNCTUATION'), ('10', 'LITERAL')]
| | | | [6:29] UNEXPOSED_EXPR: x 'x' (TypeKind.DOUBLE: double) [1 tokens] [('x', 'IDENTIFIER')]
| | | | | [6:29] DECL_REF_EXPR: x 'x' (TypeKind.DOUBLE: double) [1 tokens] [('x', 'IDENTIFIER')]
| | | | [6:33] UNEXPOSED_EXPR: [no spelling] (TypeKind.DOUBLE: double) [1 tokens] [('10', 'LITERAL')]
| | | | | [6:33] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('10', 'LITERAL')]
[8:8] FUNCTION_DECL: h 'h(double, double (*)(double))' (TypeKind.FUNCTIONPROTO: double (double, double (*)(double))) (-> TypeKind.DOUBLE: double) [USR:c:@F@h#d#*Fd(#d)#] [33 tokens]
| [8:17] PARM_DECL: x 'x' (TypeKind.DOUBLE: double) [USR:c:call_example.cpp@146@F@h#d#*Fd(#d)#@x] [2 tokens] [('double', 'KEYWORD'), ('x', 'IDENTIFIER')]
| [8:29] PARM_DECL: y 'y' (TypeKind.POINTER: double (*)(double)) [USR:c:call_example.cpp@156@F@h#d#*Fd(#d)#@y] [8 tokens] [('double', 'KEYWORD'), ('(', 'PUNCTUATION'), ('*', 'PUNCTUATION'), ('y', 'IDENTIFIER'), (')', 'PUNCTUATION'), ('(', 'PUNCTUATION'), ('double', 'KEYWORD'), (')', 'PUNCTUATION')]
| | [8:38] PARM_DECL: [no spelling] (TypeKind.DOUBLE: double) [1 tokens] [('double', 'KEYWORD')]
| [8:41] COMPOUND_STMT: [no spelling] [18 tokens]
| | [8:43] RETURN_STMT: [no spelling] [15 tokens]
| | | [8:50] BINARY_OPERATOR: [no spelling] (TypeKind.DOUBLE: double) [14 tokens]
| | | | [8:50] UNEXPOSED_EXPR: f 'f' (TypeKind.DOUBLE: double) [3 tokens] [('f', 'IDENTIFIER'), ('(', 'PUNCTUATION'), (')', 'PUNCTUATION')]
| | | | | [8:50] CALL_EXPR: f 'f' (TypeKind.INT: int) [3 tokens] [('f', 'IDENTIFIER'), ('(', 'PUNCTUATION'), (')', 'PUNCTUATION')]
| | | | | | [8:50] UNEXPOSED_EXPR: f 'f' (TypeKind.POINTER: int (*)()) [1 tokens] [('f', 'IDENTIFIER')]
| | | | | | | [8:50] DECL_REF_EXPR: f 'f' (TypeKind.FUNCTIONPROTO: int ()) [1 tokens] [('f', 'IDENTIFIER')]
| | | | [8:56] BINARY_OPERATOR: [no spelling] (TypeKind.DOUBLE: double) [10 tokens] [('::', 'PUNCTUATION'), ('g', 'IDENTIFIER'), ('(', 'PUNCTUATION'), ('x', 'IDENTIFIER'), (')', 'PUNCTUATION'), ('*', 'PUNCTUATION'), ('y', 'IDENTIFIER'), ('(', 'PUNCTUATION'), ('x', 'IDENTIFIER'), (')', 'PUNCTUATION')]
| | | | | [8:56] CALL_EXPR: g 'g' (TypeKind.DOUBLE: double) [5 tokens] [('::', 'PUNCTUATION'), ('g', 'IDENTIFIER'), ('(', 'PUNCTUATION'), ('x', 'IDENTIFIER'), (')', 'PUNCTUATION')]
| | | | | | [8:58] UNEXPOSED_EXPR: g 'g' (TypeKind.POINTER: double (*)(double)) [2 tokens] [('::', 'PUNCTUATION'), ('g', 'IDENTIFIER')]
| | | | | | | [8:58] DECL_REF_EXPR: g 'g' (TypeKind.FUNCTIONPROTO: double (double)) [2 tokens] [('::', 'PUNCTUATION'), ('g', 'IDENTIFIER')]
| | | | | | [8:60] UNEXPOSED_EXPR: x 'x' (TypeKind.DOUBLE: double) [1 tokens] [('x', 'IDENTIFIER')]
| | | | | | | [8:60] DECL_REF_EXPR: x 'x' (TypeKind.DOUBLE: double) [1 tokens] [('x', 'IDENTIFIER')]
| | | | | [8:65] CALL_EXPR: y 'y' (TypeKind.DOUBLE: double) [4 tokens] [('y', 'IDENTIFIER'), ('(', 'PUNCTUATION'), ('x', 'IDENTIFIER'), (')', 'PUNCTUATION')]
| | | | | | [8:65] UNEXPOSED_EXPR: y 'y' (TypeKind.POINTER: double (*)(double)) [1 tokens] [('y', 'IDENTIFIER')]
| | | | | | | [8:65] DECL_REF_EXPR: y 'y' (TypeKind.POINTER: double (*)(double)) [1 tokens] [('y', 'IDENTIFIER')]
| | | | | | [8:67] UNEXPOSED_EXPR: x 'x' (TypeKind.DOUBLE: double) [1 tokens] [('x', 'IDENTIFIER')]
| | | | | | | [8:67] DECL_REF_EXPR: x 'x' (TypeKind.DOUBLE: double) [1 tokens] [('x', 'IDENTIFIER')]
[10:11] NAMESPACE: N 'N' [USR:c:@N@N] [67 tokens]
| [11:9] FUNCTION_DECL: f 'f()' (TypeKind.FUNCTIONPROTO: int ()) (-> TypeKind.INT: int) [USR:c:@N@N@F@f#] [12 tokens]
| | [11:13] COMPOUND_STMT: [no spelling] [8 tokens] [('{', 'PUNCTUATION'), ('return', 'KEYWORD'), ('::', 'PUNCTUATION'), ('f', 'IDENTIFIER'), ('(', 'PUNCTUATION'), (')', 'PUNCTUATION'), (';', 'PUNCTUATION'), ('}', 'PUNCTUATION')]
| | | [11:15] RETURN_STMT: [no spelling] [5 tokens] [('return', 'KEYWORD'), ('::', 'PUNCTUATION'), ('f', 'IDENTIFIER'), ('(', 'PUNCTUATION'), (')', 'PUNCTUATION')]
| | | | [11:22] CALL_EXPR: f 'f' (TypeKind.INT: int) [4 tokens] [('::', 'PUNCTUATION'), ('f', 'IDENTIFIER'), ('(', 'PUNCTUATION'), (')', 'PUNCTUATION')]
| | | | | [11:24] UNEXPOSED_EXPR: f 'f' (TypeKind.POINTER: int (*)()) [2 tokens] [('::', 'PUNCTUATION'), ('f', 'IDENTIFIER')]
| | | | | | [11:24] DECL_REF_EXPR: f 'f' (TypeKind.FUNCTIONPROTO: int ()) [2 tokens] [('::', 'PUNCTUATION'), ('f', 'IDENTIFIER')]
| [13:12] FUNCTION_DECL: g 'g(double)' (TypeKind.FUNCTIONPROTO: double (double)) (-> TypeKind.DOUBLE: double) [USR:c:@N@N@F@g#d#] [17 tokens]
| | [13:21] PARM_DECL: x 'x' (TypeKind.DOUBLE: double) [USR:c:call_example.cpp@273@N@N@F@g#d#@x] [2 tokens] [('double', 'KEYWORD'), ('x', 'IDENTIFIER')]
| | [13:24] COMPOUND_STMT: [no spelling] [11 tokens] [('{', 'PUNCTUATION'), ('return', 'KEYWORD'), ('::', 'PUNCTUATION'), ('g', 'IDENTIFIER'), ('(', 'PUNCTUATION'), ('x', 'IDENTIFIER'), ('*', 'PUNCTUATION'), ('x', 'IDENTIFIER'), (')', 'PUNCTUATION'), (';', 'PUNCTUATION'), ('}', 'PUNCTUATION')]
| | | [13:26] RETURN_STMT: [no spelling] [8 tokens] [('return', 'KEYWORD'), ('::', 'PUNCTUATION'), ('g', 'IDENTIFIER'), ('(', 'PUNCTUATION'), ('x', 'IDENTIFIER'), ('*', 'PUNCTUATION'), ('x', 'IDENTIFIER'), (')', 'PUNCTUATION')]
| | | | [13:33] CALL_EXPR: g 'g' (TypeKind.DOUBLE: double) [7 tokens] [('::', 'PUNCTUATION'), ('g', 'IDENTIFIER'), ('(', 'PUNCTUATION'), ('x', 'IDENTIFIER'), ('*', 'PUNCTUATION'), ('x', 'IDENTIFIER'), (')', 'PUNCTUATION')]
| | | | | [13:35] UNEXPOSED_EXPR: g 'g' (TypeKind.POINTER: double (*)(double)) [2 tokens] [('::', 'PUNCTUATION'), ('g', 'IDENTIFIER')]
| | | | | | [13:35] DECL_REF_EXPR: g 'g' (TypeKind.FUNCTIONPROTO: double (double)) [2 tokens] [('::', 'PUNCTUATION'), ('g', 'IDENTIFIER')]
| | | | | [13:37] BINARY_OPERATOR: [no spelling] (TypeKind.DOUBLE: double) [3 tokens] [('x', 'IDENTIFIER'), ('*', 'PUNCTUATION'), ('x', 'IDENTIFIER')]
| | | | | | [13:37] UNEXPOSED_EXPR: x 'x' (TypeKind.DOUBLE: double) [1 tokens] [('x', 'IDENTIFIER')]
| | | | | | | [13:37] DECL_REF_EXPR: x 'x' (TypeKind.DOUBLE: double) [1 tokens] [('x', 'IDENTIFIER')]
| | | | | | [13:41] UNEXPOSED_EXPR: x 'x' (TypeKind.DOUBLE: double) [1 tokens] [('x', 'IDENTIFIER')]
| | | | | | | [13:41] DECL_REF_EXPR: x 'x' (TypeKind.DOUBLE: double) [1 tokens] [('x', 'IDENTIFIER')]
| [15:12] FUNCTION_DECL: h 'h(double, double (*)(double))' (TypeKind.FUNCTIONPROTO: double (double, double (*)(double))) (-> TypeKind.DOUBLE: double) [USR:c:@N@N@F@h#d#*Fd(#d)#] [34 tokens]
| | [15:21] PARM_DECL: x 'x' (TypeKind.DOUBLE: double) [USR:c:call_example.cpp@322@N@N@F@h#d#*Fd(#d)#@x] [2 tokens] [('double', 'KEYWORD'), ('x', 'IDENTIFIER')]
| | [15:33] PARM_DECL: y 'y' (TypeKind.POINTER: double (*)(double)) [USR:c:call_example.cpp@332@N@N@F@h#d#*Fd(#d)#@y] [8 tokens] [('double', 'KEYWORD'), ('(', 'PUNCTUATION'), ('*', 'PUNCTUATION'), ('y', 'IDENTIFIER'), (')', 'PUNCTUATION'), ('(', 'PUNCTUATION'), ('double', 'KEYWORD'), (')', 'PUNCTUATION')]
| | | [15:42] PARM_DECL: [no spelling] (TypeKind.DOUBLE: double) [1 tokens] [('double', 'KEYWORD')]
| | [15:45] COMPOUND_STMT: [no spelling] [19 tokens]
| | | [15:47] RETURN_STMT: [no spelling] [16 tokens]
| | | | [15:54] BINARY_OPERATOR: [no spelling] (TypeKind.DOUBLE: double) [15 tokens]
| | | | | [15:54] UNEXPOSED_EXPR: f 'f' (TypeKind.DOUBLE: double) [3 tokens] [('f', 'IDENTIFIER'), ('(', 'PUNCTUATION'), (')', 'PUNCTUATION')]
| | | | | | [15:54] CALL_EXPR: f 'f' (TypeKind.INT: int) [3 tokens] [('f', 'IDENTIFIER'), ('(', 'PUNCTUATION'), (')', 'PUNCTUATION')]
| | | | | | | [15:54] UNEXPOSED_EXPR: f 'f' (TypeKind.POINTER: int (*)()) [1 tokens] [('f', 'IDENTIFIER')]
| | | | | | | | [15:54] DECL_REF_EXPR: f 'f' (TypeKind.FUNCTIONPROTO: int ()) [1 tokens] [('f', 'IDENTIFIER')]
| | | | | [15:60] BINARY_OPERATOR: [no spelling] (TypeKind.DOUBLE: double) [11 tokens] [('N', 'IDENTIFIER'), ('::', 'PUNCTUATION'), ('g', 'IDENTIFIER'), ('(', 'PUNCTUATION'), ('x', 'IDENTIFIER'), (')', 'PUNCTUATION'), ('*', 'PUNCTUATION'), ('y', 'IDENTIFIER'), ('(', 'PUNCTUATION'), ('x', 'IDENTIFIER'), (')', 'PUNCTUATION')]
| | | | | | [15:60] CALL_EXPR: g 'g' (TypeKind.DOUBLE: double) [6 tokens] [('N', 'IDENTIFIER'), ('::', 'PUNCTUATION'), ('g', 'IDENTIFIER'), ('(', 'PUNCTUATION'), ('x', 'IDENTIFIER'), (')', 'PUNCTUATION')]
| | | | | | | [15:63] UNEXPOSED_EXPR: g 'g' (TypeKind.POINTER: double (*)(double)) [3 tokens] [('N', 'IDENTIFIER'), ('::', 'PUNCTUATION'), ('g', 'IDENTIFIER')]
| | | | | | | | [15:63] DECL_REF_EXPR: g 'g' (TypeKind.FUNCTIONPROTO: double (double)) [3 tokens] [('N', 'IDENTIFIER'), ('::', 'PUNCTUATION'), ('g', 'IDENTIFIER')]
| | | | | | | | | [15:60] NAMESPACE_REF: N 'N' [1 tokens] [('N', 'IDENTIFIER')]
| | | | | | | [15:65] UNEXPOSED_EXPR: x 'x' (TypeKind.DOUBLE: double) [1 tokens] [('x', 'IDENTIFIER')]
| | | | | | | | [15:65] DECL_REF_EXPR: x 'x' (TypeKind.DOUBLE: double) [1 tokens] [('x', 'IDENTIFIER')]
| | | | | | [15:70] CALL_EXPR: y 'y' (TypeKind.DOUBLE: double) [4 tokens] [('y', 'IDENTIFIER'), ('(', 'PUNCTUATION'), ('x', 'IDENTIFIER'), (')', 'PUNCTUATION')]
| | | | | | | [15:70] UNEXPOSED_EXPR: y 'y' (TypeKind.POINTER: double (*)(double)) [1 tokens] [('y', 'IDENTIFIER')]
| | | | | | | | [15:70] DECL_REF_EXPR: y 'y' (TypeKind.POINTER: double (*)(double)) [1 tokens] [('y', 'IDENTIFIER')]
| | | | | | | [15:72] UNEXPOSED_EXPR: x 'x' (TypeKind.DOUBLE: double) [1 tokens] [('x', 'IDENTIFIER')]
| | | | | | | | [15:72] DECL_REF_EXPR: x 'x' (TypeKind.DOUBLE: double) [1 tokens] [('x', 'IDENTIFIER')]
[18:7] CLASS_DECL: C 'C' (TypeKind.RECORD: C) [USR:c:@S@C] [36 tokens]
| [19:1] CXX_ACCESS_SPEC_DECL: [no spelling] [USR:c:] [AccessSpecifier.PUBLIC] [2 tokens] [('public', 'KEYWORD'), (':', 'PUNCTUATION')]
| [20:9] FIELD_DECL: x_ 'x_' (TypeKind.INT: int) [USR:c:@S@C@FI@x_] [AccessSpecifier.PUBLIC] [2 tokens] [('int', 'KEYWORD'), ('x_', 'IDENTIFIER')]
| [21:5] CONSTRUCTOR: C 'C()' (TypeKind.FUNCTIONPROTO: void ()) (-> TypeKind.VOID: void) [USR:c:@S@C@F@C#] [AccessSpecifier.PUBLIC] [10 tokens] [('C', 'IDENTIFIER'), ('(', 'PUNCTUATION'), (')', 'PUNCTUATION'), (':', 'PUNCTUATION'), ('x_', 'IDENTIFIER'), ('(', 'PUNCTUATION'), ('1', 'LITERAL'), (')', 'PUNCTUATION'), ('{', 'PUNCTUATION'), ('}', 'PUNCTUATION')]
| | [21:10] MEMBER_REF: x_ 'x_' (TypeKind.INT: int) [1 tokens] [('x_', 'IDENTIFIER')]
| | [21:13] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('1', 'LITERAL')]
| | [21:16] COMPOUND_STMT: [no spelling] [2 tokens] [('{', 'PUNCTUATION'), ('}', 'PUNCTUATION')]
| [22:9] CXX_METHOD: m 'm(int)' (TypeKind.FUNCTIONPROTO: int (int)) (-> TypeKind.INT: int) [USR:c:@S@C@F@m#I#] [AccessSpecifier.PUBLIC] [17 tokens]
| | [22:15] PARM_DECL: a 'a' (TypeKind.INT: int) [USR:c:call_example.cpp@454@S@C@F@m#I#@a] [2 tokens] [('int', 'KEYWORD'), ('a', 'IDENTIFIER')]
| | [22:18] COMPOUND_STMT: [no spelling] [11 tokens] [('{', 'PUNCTUATION'), ('return', 'KEYWORD'), ('x_', 'IDENTIFIER'), ('*', 'PUNCTUATION'), ('this', 'KEYWORD'), ('->', 'PUNCTUATION'), ('x_', 'IDENTIFIER'), ('*', 'PUNCTUATION'), ('a', 'IDENTIFIER'), (';', 'PUNCTUATION'), ('}', 'PUNCTUATION')]
| | | [22:20] RETURN_STMT: [no spelling] [8 tokens] [('return', 'KEYWORD'), ('x_', 'IDENTIFIER'), ('*', 'PUNCTUATION'), ('this', 'KEYWORD'), ('->', 'PUNCTUATION'), ('x_', 'IDENTIFIER'), ('*', 'PUNCTUATION'), ('a', 'IDENTIFIER')]
| | | | [22:27] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [7 tokens] [('x_', 'IDENTIFIER'), ('*', 'PUNCTUATION'), ('this', 'KEYWORD'), ('->', 'PUNCTUATION'), ('x_', 'IDENTIFIER'), ('*', 'PUNCTUATION'), ('a', 'IDENTIFIER')]
| | | | | [22:27] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [5 tokens] [('x_', 'IDENTIFIER'), ('*', 'PUNCTUATION'), ('this', 'KEYWORD'), ('->', 'PUNCTUATION'), ('x_', 'IDENTIFIER')]
| | | | | | [22:27] UNEXPOSED_EXPR: x_ 'x_' (TypeKind.INT: int) [1 tokens] [('x_', 'IDENTIFIER')]
| | | | | | | [22:27] MEMBER_REF_EXPR: x_ 'x_' (TypeKind.INT: int) [1 tokens] [('x_', 'IDENTIFIER')]
| | | | | | [22:38] UNEXPOSED_EXPR: x_ 'x_' (TypeKind.INT: int) [3 tokens] [('this', 'KEYWORD'), ('->', 'PUNCTUATION'), ('x_', 'IDENTIFIER')]
| | | | | | | [22:38] MEMBER_REF_EXPR: x_ 'x_' (TypeKind.INT: int) [3 tokens] [('this', 'KEYWORD'), ('->', 'PUNCTUATION'), ('x_', 'IDENTIFIER')]
| | | | | | | | [22:32] CXX_THIS_EXPR: [no spelling] (TypeKind.POINTER: C *) [1 tokens] [('this', 'KEYWORD')]
| | | | | [22:43] UNEXPOSED_EXPR: a 'a' (TypeKind.INT: int) [1 tokens] [('a', 'IDENTIFIER')]
| | | | | | [22:43] DECL_REF_EXPR: a 'a' (TypeKind.INT: int) [1 tokens] [('a', 'IDENTIFIER')]
[26:5] FUNCTION_DECL: main 'main(int, char **)' (TypeKind.FUNCTIONPROTO: int (int, char **)) (-> TypeKind.INT: int) [USR:c:@F@main#I#**C#] [80 tokens]
| [26:14] PARM_DECL: argc 'argc' (TypeKind.INT: int) [USR:c:call_example.cpp@509@F@main#I#**C#@argc] [2 tokens] [('int', 'KEYWORD'), ('argc', 'IDENTIFIER')]
| [26:28] PARM_DECL: argv 'argv' (TypeKind.POINTER: char **) [USR:c:call_example.cpp@519@F@main#I#**C#@argv] [4 tokens] [('char', 'KEYWORD'), ('*', 'PUNCTUATION'), ('*', 'PUNCTUATION'), ('argv', 'IDENTIFIER')]
| [26:34] COMPOUND_STMT: [no spelling] [69 tokens]
| | [27:5] DECL_STMT: [no spelling] [3 tokens] [('C', 'IDENTIFIER'), ('c', 'IDENTIFIER'), (';', 'PUNCTUATION')]
| | | [27:7] VAR_DECL: c 'c' (TypeKind.RECORD: C) [USR:c:call_example.cpp@540@F@main#I#**C#@c] [2 tokens] [('C', 'IDENTIFIER'), ('c', 'IDENTIFIER')]
| | | | [27:5] TYPE_REF: class C 'class C' (TypeKind.RECORD: C) [1 tokens] [('C', 'IDENTIFIER')]
| | | | [27:7] CALL_EXPR: C 'C' (TypeKind.RECORD: C) [1 tokens] [('c', 'IDENTIFIER')]
| | [28:5] CALL_EXPR: m 'm' (TypeKind.INT: int) [6 tokens] [('c', 'IDENTIFIER'), ('.', 'PUNCTUATION'), ('m', 'IDENTIFIER'), ('(', 'PUNCTUATION'), ('42', 'LITERAL'), (')', 'PUNCTUATION')]
| | | [28:7] MEMBER_REF_EXPR: m 'm' (TypeKind.UNEXPOSED: <bound member function type>) [3 tokens] [('c', 'IDENTIFIER'), ('.', 'PUNCTUATION'), ('m', 'IDENTIFIER')]
| | | | [28:5] DECL_REF_EXPR: c 'c' (TypeKind.RECORD: C) [1 tokens] [('c', 'IDENTIFIER')]
| | | [28:9] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('42', 'LITERAL')]
| | [30:5] DECL_STMT: [no spelling] [7 tokens] [('int', 'KEYWORD'), ('a', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('f', 'IDENTIFIER'), ('(', 'PUNCTUATION'), (')', 'PUNCTUATION'), (';', 'PUNCTUATION')]
| | | [30:9] VAR_DECL: a 'a' (TypeKind.INT: int) [USR:c:call_example.cpp@566@F@main#I#**C#@a] [6 tokens] [('int', 'KEYWORD'), ('a', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('f', 'IDENTIFIER'), ('(', 'PUNCTUATION'), (')', 'PUNCTUATION')]
| | | | [30:13] CALL_EXPR: f 'f' (TypeKind.INT: int) [3 tokens] [('f', 'IDENTIFIER'), ('(', 'PUNCTUATION'), (')', 'PUNCTUATION')]
| | | | | [30:13] UNEXPOSED_EXPR: f 'f' (TypeKind.POINTER: int (*)()) [1 tokens] [('f', 'IDENTIFIER')]
| | | | | | [30:13] DECL_REF_EXPR: f 'f' (TypeKind.FUNCTIONPROTO: int ()) [1 tokens] [('f', 'IDENTIFIER')]
| | [31:5] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [6 tokens] [('a', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('g', 'IDENTIFIER'), ('(', 'PUNCTUATION'), ('a', 'IDENTIFIER'), (')', 'PUNCTUATION')]
| | | [31:5] DECL_REF_EXPR: a 'a' (TypeKind.INT: int) [1 tokens] [('a', 'IDENTIFIER')]
| | | [31:9] UNEXPOSED_EXPR: g 'g' (TypeKind.INT: int) [4 tokens] [('g', 'IDENTIFIER'), ('(', 'PUNCTUATION'), ('a', 'IDENTIFIER'), (')', 'PUNCTUATION')]
| | | | [31:9] CALL_EXPR: g 'g' (TypeKind.DOUBLE: double) [4 tokens] [('g', 'IDENTIFIER'), ('(', 'PUNCTUATION'), ('a', 'IDENTIFIER'), (')', 'PUNCTUATION')]
| | | | | [31:9] UNEXPOSED_EXPR: g 'g' (TypeKind.POINTER: double (*)(double)) [1 tokens] [('g', 'IDENTIFIER')]
| | | | | | [31:9] DECL_REF_EXPR: g 'g' (TypeKind.FUNCTIONPROTO: double (double)) [1 tokens] [('g', 'IDENTIFIER')]
| | | | | [31:11] UNEXPOSED_EXPR: a 'a' (TypeKind.DOUBLE: double) [1 tokens] [('a', 'IDENTIFIER')]
| | | | | | [31:11] UNEXPOSED_EXPR: a 'a' (TypeKind.INT: int) [1 tokens] [('a', 'IDENTIFIER')]
| | | | | | | [31:11] DECL_REF_EXPR: a 'a' (TypeKind.INT: int) [1 tokens] [('a', 'IDENTIFIER')]
| | [32:5] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [8 tokens] [('a', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('h', 'IDENTIFIER'), ('(', 'PUNCTUATION'), ('a', 'IDENTIFIER'), (',', 'PUNCTUATION'), ('g', 'IDENTIFIER'), (')', 'PUNCTUATION')]
| | | [32:5] DECL_REF_EXPR: a 'a' (TypeKind.INT: int) [1 tokens] [('a', 'IDENTIFIER')]
| | | [32:9] UNEXPOSED_EXPR: h 'h' (TypeKind.INT: int) [6 tokens] [('h', 'IDENTIFIER'), ('(', 'PUNCTUATION'), ('a', 'IDENTIFIER'), (',', 'PUNCTUATION'), ('g', 'IDENTIFIER'), (')', 'PUNCTUATION')]
| | | | [32:9] CALL_EXPR: h 'h' (TypeKind.DOUBLE: double) [6 tokens] [('h', 'IDENTIFIER'), ('(', 'PUNCTUATION'), ('a', 'IDENTIFIER'), (',', 'PUNCTUATION'), ('g', 'IDENTIFIER'), (')', 'PUNCTUATION')]
| | | | | [32:9] UNEXPOSED_EXPR: h 'h' (TypeKind.POINTER: double (*)(double, double (*)(double))) [1 tokens] [('h', 'IDENTIFIER')]
| | | | | | [32:9] DECL_REF_EXPR: h 'h' (TypeKind.FUNCTIONPROTO: double (double, double (*)(double))) [1 tokens] [('h', 'IDENTIFIER')]
| | | | | [32:11] UNEXPOSED_EXPR: a 'a' (TypeKind.DOUBLE: double) [1 tokens] [('a', 'IDENTIFIER')]
| | | | | | [32:11] UNEXPOSED_EXPR: a 'a' (TypeKind.INT: int) [1 tokens] [('a', 'IDENTIFIER')]
| | | | | | | [32:11] DECL_REF_EXPR: a 'a' (TypeKind.INT: int) [1 tokens] [('a', 'IDENTIFIER')]
| | | | | [32:14] UNEXPOSED_EXPR: g 'g' (TypeKind.POINTER: double (*)(double)) [1 tokens] [('g', 'IDENTIFIER')]
| | | | | | [32:14] DECL_REF_EXPR: g 'g' (TypeKind.FUNCTIONPROTO: double (double)) [1 tokens] [('g', 'IDENTIFIER')]
| | [34:5] DECL_STMT: [no spelling] [9 tokens] [('int', 'KEYWORD'), ('b', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('N', 'IDENTIFIER'), ('::', 'PUNCTUATION'), ('f', 'IDENTIFIER'), ('(', 'PUNCTUATION'), (')', 'PUNCTUATION'), (';', 'PUNCTUATION')]
| | | [34:9] VAR_DECL: b 'b' (TypeKind.INT: int) [USR:c:call_example.cpp@619@F@main#I#**C#@b] [8 tokens] [('int', 'KEYWORD'), ('b', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('N', 'IDENTIFIER'), ('::', 'PUNCTUATION'), ('f', 'IDENTIFIER'), ('(', 'PUNCTUATION'), (')', 'PUNCTUATION')]
| | | | [34:13] CALL_EXPR: f 'f' (TypeKind.INT: int) [5 tokens] [('N', 'IDENTIFIER'), ('::', 'PUNCTUATION'), ('f', 'IDENTIFIER'), ('(', 'PUNCTUATION'), (')', 'PUNCTUATION')]
| | | | | [34:16] UNEXPOSED_EXPR: f 'f' (TypeKind.POINTER: int (*)()) [3 tokens] [('N', 'IDENTIFIER'), ('::', 'PUNCTUATION'), ('f', 'IDENTIFIER')]
| | | | | | [34:16] DECL_REF_EXPR: f 'f' (TypeKind.FUNCTIONPROTO: int ()) [3 tokens] [('N', 'IDENTIFIER'), ('::', 'PUNCTUATION'), ('f', 'IDENTIFIER')]
| | | | | | | [34:13] NAMESPACE_REF: N 'N' [1 tokens] [('N', 'IDENTIFIER')]
| | [35:5] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [8 tokens] [('b', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('N', 'IDENTIFIER'), ('::', 'PUNCTUATION'), ('g', 'IDENTIFIER'), ('(', 'PUNCTUATION'), ('a', 'IDENTIFIER'), (')', 'PUNCTUATION')]
| | | [35:5] DECL_REF_EXPR: b 'b' (TypeKind.INT: int) [1 tokens] [('b', 'IDENTIFIER')]
| | | [35:9] UNEXPOSED_EXPR: g 'g' (TypeKind.INT: int) [6 tokens] [('N', 'IDENTIFIER'), ('::', 'PUNCTUATION'), ('g', 'IDENTIFIER'), ('(', 'PUNCTUATION'), ('a', 'IDENTIFIER'), (')', 'PUNCTUATION')]
| | | | [35:9] CALL_EXPR: g 'g' (TypeKind.DOUBLE: double) [6 tokens] [('N', 'IDENTIFIER'), ('::', 'PUNCTUATION'), ('g', 'IDENTIFIER'), ('(', 'PUNCTUATION'), ('a', 'IDENTIFIER'), (')', 'PUNCTUATION')]
| | | | | [35:12] UNEXPOSED_EXPR: g 'g' (TypeKind.POINTER: double (*)(double)) [3 tokens] [('N', 'IDENTIFIER'), ('::', 'PUNCTUATION'), ('g', 'IDENTIFIER')]
| | | | | | [35:12] DECL_REF_EXPR: g 'g' (TypeKind.FUNCTIONPROTO: double (double)) [3 tokens] [('N', 'IDENTIFIER'), ('::', 'PUNCTUATION'), ('g', 'IDENTIFIER')]
| | | | | | | [35:9] NAMESPACE_REF: N 'N' [1 tokens] [('N', 'IDENTIFIER')]
| | | | | [35:14] UNEXPOSED_EXPR: a 'a' (TypeKind.DOUBLE: double) [1 tokens] [('a', 'IDENTIFIER')]
| | | | | | [35:14] UNEXPOSED_EXPR: a 'a' (TypeKind.INT: int) [1 tokens] [('a', 'IDENTIFIER')]
| | | | | | | [35:14] DECL_REF_EXPR: a 'a' (TypeKind.INT: int) [1 tokens] [('a', 'IDENTIFIER')]
| | [36:5] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [12 tokens]
| | | [36:5] DECL_REF_EXPR: b 'b' (TypeKind.INT: int) [1 tokens] [('b', 'IDENTIFIER')]
| | | [36:9] UNEXPOSED_EXPR: h 'h' (TypeKind.INT: int) [10 tokens] [('N', 'IDENTIFIER'), ('::', 'PUNCTUATION'), ('h', 'IDENTIFIER'), ('(', 'PUNCTUATION'), ('a', 'IDENTIFIER'), (',', 'PUNCTUATION'), ('N', 'IDENTIFIER'), ('::', 'PUNCTUATION'), ('g', 'IDENTIFIER'), (')', 'PUNCTUATION')]
| | | | [36:9] CALL_EXPR: h 'h' (TypeKind.DOUBLE: double) [10 tokens] [('N', 'IDENTIFIER'), ('::', 'PUNCTUATION'), ('h', 'IDENTIFIER'), ('(', 'PUNCTUATION'), ('a', 'IDENTIFIER'), (',', 'PUNCTUATION'), ('N', 'IDENTIFIER'), ('::', 'PUNCTUATION'), ('g', 'IDENTIFIER'), (')', 'PUNCTUATION')]
| | | | | [36:12] UNEXPOSED_EXPR: h 'h' (TypeKind.POINTER: double (*)(double, double (*)(double))) [3 tokens] [('N', 'IDENTIFIER'), ('::', 'PUNCTUATION'), ('h', 'IDENTIFIER')]
| | | | | | [36:12] DECL_REF_EXPR: h 'h' (TypeKind.FUNCTIONPROTO: double (double, double (*)(double))) [3 tokens] [('N', 'IDENTIFIER'), ('::', 'PUNCTUATION'), ('h', 'IDENTIFIER')]
| | | | | | | [36:9] NAMESPACE_REF: N 'N' [1 tokens] [('N', 'IDENTIFIER')]
| | | | | [36:14] UNEXPOSED_EXPR: a 'a' (TypeKind.DOUBLE: double) [1 tokens] [('a', 'IDENTIFIER')]
| | | | | | [36:14] UNEXPOSED_EXPR: a 'a' (TypeKind.INT: int) [1 tokens] [('a', 'IDENTIFIER')]
| | | | | | | [36:14] DECL_REF_EXPR: a 'a' (TypeKind.INT: int) [1 tokens] [('a', 'IDENTIFIER')]
| | | | | [36:20] UNEXPOSED_EXPR: g 'g' (TypeKind.POINTER: double (*)(double)) [3 tokens] [('N', 'IDENTIFIER'), ('::', 'PUNCTUATION'), ('g', 'IDENTIFIER')]
| | | | | | [36:20] DECL_REF_EXPR: g 'g' (TypeKind.FUNCTIONPROTO: double (double)) [3 tokens] [('N', 'IDENTIFIER'), ('::', 'PUNCTUATION'), ('g', 'IDENTIFIER')]
| | | | | | | [36:17] NAMESPACE_REF: N 'N' [1 tokens] [('N', 'IDENTIFIER')]
| | [38:5] RETURN_STMT: [no spelling] [2 tokens] [('return', 'KEYWORD'), ('0', 'LITERAL')]
| | | [38:12] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('0', 'LITERAL')]