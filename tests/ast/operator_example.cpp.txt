[AST] /mnt/c/Users/afariasa/Software/cpp-bonsai/tests/input/operator_example.cpp
[4:17] USING_DIRECTIVE: [no spelling] [3 tokens] [('using', 'KEYWORD'), ('namespace', 'KEYWORD'), ('std', 'IDENTIFIER')]
| [4:17] NAMESPACE_REF: std 'std' [1 tokens] [('std', 'IDENTIFIER')]
[6:5] FUNCTION_DECL: main 'main()' (TypeKind.FUNCTIONPROTO: int ()) (-> TypeKind.INT: int) [USR:c:@F@main#] [244 tokens]
| [7:1] COMPOUND_STMT: [no spelling] [240 tokens]
| | [8:5] DECL_STMT: [no spelling] [7 tokens] [('int', 'KEYWORD'), ('x', 'IDENTIFIER'), (',', 'PUNCTUATION'), ('y', 'IDENTIFIER'), (',', 'PUNCTUATION'), ('z', 'IDENTIFIER'), (';', 'PUNCTUATION')]
| | | [8:9] VAR_DECL: x 'x' (TypeKind.INT: int) [USR:c:operator_example.cpp@115@F@main#@x] [2 tokens] [('int', 'KEYWORD'), ('x', 'IDENTIFIER')]
| | | [8:12] VAR_DECL: y 'y' (TypeKind.INT: int) [USR:c:operator_example.cpp@115@F@main#@y] [1 tokens] [('y', 'IDENTIFIER')]
| | | [8:15] VAR_DECL: z 'z' (TypeKind.INT: int) [USR:c:operator_example.cpp@115@F@main#@z] [1 tokens] [('z', 'IDENTIFIER')]
| | [9:5] DECL_STMT: [no spelling] [5 tokens] [('bool', 'KEYWORD'), ('a', 'IDENTIFIER'), (',', 'PUNCTUATION'), ('b', 'IDENTIFIER'), (';', 'PUNCTUATION')]
| | | [9:10] VAR_DECL: a 'a' (TypeKind.BOOL: bool) [USR:c:operator_example.cpp@133@F@main#@a] [2 tokens] [('bool', 'KEYWORD'), ('a', 'IDENTIFIER')]
| | | [9:13] VAR_DECL: b 'b' (TypeKind.BOOL: bool) [USR:c:operator_example.cpp@133@F@main#@b] [1 tokens] [('b', 'IDENTIFIER')]
| | [10:5] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [3 tokens] [('x', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('10', 'LITERAL')]
| | | [10:5] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | [10:9] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('10', 'LITERAL')]
| | [11:5] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [3 tokens] [('y', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('4', 'LITERAL')]
| | | [11:5] DECL_REF_EXPR: y 'y' (TypeKind.INT: int) [1 tokens] [('y', 'IDENTIFIER')]
| | | [11:9] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('4', 'LITERAL')]
| | [12:5] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [3 tokens] [('x', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('y', 'IDENTIFIER')]
| | | [12:5] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | [12:9] UNEXPOSED_EXPR: y 'y' (TypeKind.INT: int) [1 tokens] [('y', 'IDENTIFIER')]
| | | | [12:9] DECL_REF_EXPR: y 'y' (TypeKind.INT: int) [1 tokens] [('y', 'IDENTIFIER')]
| | [13:5] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [3 tokens] [('z', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('7', 'LITERAL')]
| | | [13:5] DECL_REF_EXPR: z 'z' (TypeKind.INT: int) [1 tokens] [('z', 'IDENTIFIER')]
| | | [13:9] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('7', 'LITERAL')]
| | [15:5] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [9 tokens] [('y', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('2', 'LITERAL'), ('+', 'PUNCTUATION'), ('(', 'PUNCTUATION'), ('x', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('5', 'LITERAL'), (')', 'PUNCTUATION')]
| | | [15:5] DECL_REF_EXPR: y 'y' (TypeKind.INT: int) [1 tokens] [('y', 'IDENTIFIER')]
| | | [15:9] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [7 tokens] [('2', 'LITERAL'), ('+', 'PUNCTUATION'), ('(', 'PUNCTUATION'), ('x', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('5', 'LITERAL'), (')', 'PUNCTUATION')]
| | | | [15:9] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('2', 'LITERAL')]
| | | | [15:13] UNEXPOSED_EXPR: [no spelling] (TypeKind.INT: int) [5 tokens] [('(', 'PUNCTUATION'), ('x', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('5', 'LITERAL'), (')', 'PUNCTUATION')]
| | | | | [15:13] PAREN_EXPR: [no spelling] (TypeKind.INT: int) [5 tokens] [('(', 'PUNCTUATION'), ('x', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('5', 'LITERAL'), (')', 'PUNCTUATION')]
| | | | | | [15:14] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [3 tokens] [('x', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('5', 'LITERAL')]
| | | | | | | [15:14] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | | | | [15:18] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('5', 'LITERAL')]
| | [16:5] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [7 tokens] [('x', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('y', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('z', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('5', 'LITERAL')]
| | | [16:5] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | [16:9] UNEXPOSED_EXPR: [no spelling] (TypeKind.INT: int) [5 tokens] [('y', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('z', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('5', 'LITERAL')]
| | | | [16:9] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [5 tokens] [('y', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('z', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('5', 'LITERAL')]
| | | | | [16:9] DECL_REF_EXPR: y 'y' (TypeKind.INT: int) [1 tokens] [('y', 'IDENTIFIER')]
| | | | | [16:13] UNEXPOSED_EXPR: [no spelling] (TypeKind.INT: int) [3 tokens] [('z', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('5', 'LITERAL')]
| | | | | | [16:13] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [3 tokens] [('z', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('5', 'LITERAL')]
| | | | | | | [16:13] DECL_REF_EXPR: z 'z' (TypeKind.INT: int) [1 tokens] [('z', 'IDENTIFIER')]
| | | | | | | [16:17] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('5', 'LITERAL')]
| | [18:5] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [5 tokens] [('x', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('11', 'LITERAL'), ('-', 'PUNCTUATION'), ('3', 'LITERAL')]
| | | [18:5] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | [18:9] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [3 tokens] [('11', 'LITERAL'), ('-', 'PUNCTUATION'), ('3', 'LITERAL')]
| | | | [18:9] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('11', 'LITERAL')]
| | | | [18:14] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('3', 'LITERAL')]
| | [19:5] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [5 tokens] [('x', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('x', 'IDENTIFIER'), ('*', 'PUNCTUATION'), ('3', 'LITERAL')]
| | | [19:5] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | [19:9] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [3 tokens] [('x', 'IDENTIFIER'), ('*', 'PUNCTUATION'), ('3', 'LITERAL')]
| | | | [19:9] UNEXPOSED_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | | [19:9] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | [19:13] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('3', 'LITERAL')]
| | [20:5] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [5 tokens] [('x', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('x', 'IDENTIFIER'), ('/', 'PUNCTUATION'), ('3', 'LITERAL')]
| | | [20:5] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | [20:9] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [3 tokens] [('x', 'IDENTIFIER'), ('/', 'PUNCTUATION'), ('3', 'LITERAL')]
| | | | [20:9] UNEXPOSED_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | | [20:9] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | [20:13] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('3', 'LITERAL')]
| | [21:5] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [5 tokens] [('x', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('x', 'IDENTIFIER'), ('%', 'PUNCTUATION'), ('3', 'LITERAL')]
| | | [21:5] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | [21:9] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [3 tokens] [('x', 'IDENTIFIER'), ('%', 'PUNCTUATION'), ('3', 'LITERAL')]
| | | | [21:9] UNEXPOSED_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | | [21:9] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | [21:13] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('3', 'LITERAL')]
| | [23:5] COMPOUND_ASSIGNMENT_OPERATOR: [no spelling] (TypeKind.INT: int) [3 tokens] [('y', 'IDENTIFIER'), ('+=', 'PUNCTUATION'), ('x', 'IDENTIFIER')]
| | | [23:5] DECL_REF_EXPR: y 'y' (TypeKind.INT: int) [1 tokens] [('y', 'IDENTIFIER')]
| | | [23:10] UNEXPOSED_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | [23:10] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | [24:5] COMPOUND_ASSIGNMENT_OPERATOR: [no spelling] (TypeKind.INT: int) [3 tokens] [('x', 'IDENTIFIER'), ('-=', 'PUNCTUATION'), ('5', 'LITERAL')]
| | | [24:5] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | [24:10] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('5', 'LITERAL')]
| | [25:5] COMPOUND_ASSIGNMENT_OPERATOR: [no spelling] (TypeKind.INT: int) [3 tokens] [('x', 'IDENTIFIER'), ('*=', 'PUNCTUATION'), ('y', 'IDENTIFIER')]
| | | [25:5] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | [25:10] UNEXPOSED_EXPR: y 'y' (TypeKind.INT: int) [1 tokens] [('y', 'IDENTIFIER')]
| | | | [25:10] DECL_REF_EXPR: y 'y' (TypeKind.INT: int) [1 tokens] [('y', 'IDENTIFIER')]
| | [26:5] COMPOUND_ASSIGNMENT_OPERATOR: [no spelling] (TypeKind.INT: int) [3 tokens] [('y', 'IDENTIFIER'), ('/=', 'PUNCTUATION'), ('x', 'IDENTIFIER')]
| | | [26:5] DECL_REF_EXPR: y 'y' (TypeKind.INT: int) [1 tokens] [('y', 'IDENTIFIER')]
| | | [26:10] UNEXPOSED_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | [26:10] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | [27:5] COMPOUND_ASSIGNMENT_OPERATOR: [no spelling] (TypeKind.INT: int) [3 tokens] [('x', 'IDENTIFIER'), ('%=', 'PUNCTUATION'), ('2', 'LITERAL')]
| | | [27:5] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | [27:10] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('2', 'LITERAL')]
| | [28:5] COMPOUND_ASSIGNMENT_OPERATOR: [no spelling] (TypeKind.INT: int) [3 tokens] [('x', 'IDENTIFIER'), ('>>=', 'PUNCTUATION'), ('3', 'LITERAL')]
| | | [28:5] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | [28:11] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('3', 'LITERAL')]
| | [29:5] COMPOUND_ASSIGNMENT_OPERATOR: [no spelling] (TypeKind.INT: int) [3 tokens] [('y', 'IDENTIFIER'), ('<<=', 'PUNCTUATION'), ('4', 'LITERAL')]
| | | [29:5] DECL_REF_EXPR: y 'y' (TypeKind.INT: int) [1 tokens] [('y', 'IDENTIFIER')]
| | | [29:11] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('4', 'LITERAL')]
| | [30:5] COMPOUND_ASSIGNMENT_OPERATOR: [no spelling] (TypeKind.INT: int) [3 tokens] [('x', 'IDENTIFIER'), ('&=', 'PUNCTUATION'), ('30', 'LITERAL')]
| | | [30:5] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | [30:10] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('30', 'LITERAL')]
| | [31:5] COMPOUND_ASSIGNMENT_OPERATOR: [no spelling] (TypeKind.INT: int) [3 tokens] [('x', 'IDENTIFIER'), ('|=', 'PUNCTUATION'), ('16', 'LITERAL')]
| | | [31:5] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | [31:10] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('16', 'LITERAL')]
| | [32:5] COMPOUND_ASSIGNMENT_OPERATOR: [no spelling] (TypeKind.INT: int) [3 tokens] [('y', 'IDENTIFIER'), ('^=', 'PUNCTUATION'), ('20', 'LITERAL')]
| | | [32:5] DECL_REF_EXPR: y 'y' (TypeKind.INT: int) [1 tokens] [('y', 'IDENTIFIER')]
| | | [32:10] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('20', 'LITERAL')]
| | [34:5] UNARY_OPERATOR: [no spelling] (TypeKind.INT: int) [2 tokens] [('++', 'PUNCTUATION'), ('x', 'IDENTIFIER')]
| | | [34:7] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | [35:5] UNARY_OPERATOR: [no spelling] (TypeKind.INT: int) [2 tokens] [('y', 'IDENTIFIER'), ('++', 'PUNCTUATION')]
| | | [35:5] DECL_REF_EXPR: y 'y' (TypeKind.INT: int) [1 tokens] [('y', 'IDENTIFIER')]
| | [36:5] UNARY_OPERATOR: [no spelling] (TypeKind.INT: int) [2 tokens] [('--', 'PUNCTUATION'), ('x', 'IDENTIFIER')]
| | | [36:7] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | [37:5] UNARY_OPERATOR: [no spelling] (TypeKind.INT: int) [2 tokens] [('y', 'IDENTIFIER'), ('--', 'PUNCTUATION')]
| | | [37:5] DECL_REF_EXPR: y 'y' (TypeKind.INT: int) [1 tokens] [('y', 'IDENTIFIER')]
| | [39:5] BINARY_OPERATOR: [no spelling] (TypeKind.BOOL: bool) [5 tokens] [('a', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('x', 'IDENTIFIER'), ('==', 'PUNCTUATION'), ('y', 'IDENTIFIER')]
| | | [39:5] DECL_REF_EXPR: a 'a' (TypeKind.BOOL: bool) [1 tokens] [('a', 'IDENTIFIER')]
| | | [39:9] BINARY_OPERATOR: [no spelling] (TypeKind.BOOL: bool) [3 tokens] [('x', 'IDENTIFIER'), ('==', 'PUNCTUATION'), ('y', 'IDENTIFIER')]
| | | | [39:9] UNEXPOSED_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | | [39:9] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | [39:14] UNEXPOSED_EXPR: y 'y' (TypeKind.INT: int) [1 tokens] [('y', 'IDENTIFIER')]
| | | | | [39:14] DECL_REF_EXPR: y 'y' (TypeKind.INT: int) [1 tokens] [('y', 'IDENTIFIER')]
| | [40:5] BINARY_OPERATOR: [no spelling] (TypeKind.BOOL: bool) [5 tokens] [('b', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('x', 'IDENTIFIER'), ('!=', 'PUNCTUATION'), ('z', 'IDENTIFIER')]
| | | [40:5] DECL_REF_EXPR: b 'b' (TypeKind.BOOL: bool) [1 tokens] [('b', 'IDENTIFIER')]
| | | [40:9] BINARY_OPERATOR: [no spelling] (TypeKind.BOOL: bool) [3 tokens] [('x', 'IDENTIFIER'), ('!=', 'PUNCTUATION'), ('z', 'IDENTIFIER')]
| | | | [40:9] UNEXPOSED_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | | [40:9] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | [40:14] UNEXPOSED_EXPR: z 'z' (TypeKind.INT: int) [1 tokens] [('z', 'IDENTIFIER')]
| | | | | [40:14] DECL_REF_EXPR: z 'z' (TypeKind.INT: int) [1 tokens] [('z', 'IDENTIFIER')]
| | [41:5] BINARY_OPERATOR: [no spelling] (TypeKind.BOOL: bool) [5 tokens] [('a', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('x', 'IDENTIFIER'), ('>', 'PUNCTUATION'), ('y', 'IDENTIFIER')]
| | | [41:5] DECL_REF_EXPR: a 'a' (TypeKind.BOOL: bool) [1 tokens] [('a', 'IDENTIFIER')]
| | | [41:9] BINARY_OPERATOR: [no spelling] (TypeKind.BOOL: bool) [3 tokens] [('x', 'IDENTIFIER'), ('>', 'PUNCTUATION'), ('y', 'IDENTIFIER')]
| | | | [41:9] UNEXPOSED_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | | [41:9] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | [41:13] UNEXPOSED_EXPR: y 'y' (TypeKind.INT: int) [1 tokens] [('y', 'IDENTIFIER')]
| | | | | [41:13] DECL_REF_EXPR: y 'y' (TypeKind.INT: int) [1 tokens] [('y', 'IDENTIFIER')]
| | [42:5] BINARY_OPERATOR: [no spelling] (TypeKind.BOOL: bool) [8 tokens] [('b', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('!', 'PUNCTUATION'), ('(', 'PUNCTUATION'), ('z', 'IDENTIFIER'), ('<', 'PUNCTUATION'), ('x', 'IDENTIFIER'), (')', 'PUNCTUATION')]
| | | [42:5] DECL_REF_EXPR: b 'b' (TypeKind.BOOL: bool) [1 tokens] [('b', 'IDENTIFIER')]
| | | [42:9] UNARY_OPERATOR: [no spelling] (TypeKind.BOOL: bool) [6 tokens] [('!', 'PUNCTUATION'), ('(', 'PUNCTUATION'), ('z', 'IDENTIFIER'), ('<', 'PUNCTUATION'), ('x', 'IDENTIFIER'), (')', 'PUNCTUATION')]
| | | | [42:10] PAREN_EXPR: [no spelling] (TypeKind.BOOL: bool) [5 tokens] [('(', 'PUNCTUATION'), ('z', 'IDENTIFIER'), ('<', 'PUNCTUATION'), ('x', 'IDENTIFIER'), (')', 'PUNCTUATION')]
| | | | | [42:11] BINARY_OPERATOR: [no spelling] (TypeKind.BOOL: bool) [3 tokens] [('z', 'IDENTIFIER'), ('<', 'PUNCTUATION'), ('x', 'IDENTIFIER')]
| | | | | | [42:11] UNEXPOSED_EXPR: z 'z' (TypeKind.INT: int) [1 tokens] [('z', 'IDENTIFIER')]
| | | | | | | [42:11] DECL_REF_EXPR: z 'z' (TypeKind.INT: int) [1 tokens] [('z', 'IDENTIFIER')]
| | | | | | [42:15] UNEXPOSED_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | | | | [42:15] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | [43:5] BINARY_OPERATOR: [no spelling] (TypeKind.BOOL: bool) [9 tokens] [('a', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('x', 'IDENTIFIER'), ('>=', 'PUNCTUATION'), ('z', 'IDENTIFIER'), ('&&', 'PUNCTUATION'), ('x', 'IDENTIFIER'), ('<', 'PUNCTUATION'), ('1', 'LITERAL')]
| | | [43:5] DECL_REF_EXPR: a 'a' (TypeKind.BOOL: bool) [1 tokens] [('a', 'IDENTIFIER')]
| | | [43:9] BINARY_OPERATOR: [no spelling] (TypeKind.BOOL: bool) [7 tokens] [('x', 'IDENTIFIER'), ('>=', 'PUNCTUATION'), ('z', 'IDENTIFIER'), ('&&', 'PUNCTUATION'), ('x', 'IDENTIFIER'), ('<', 'PUNCTUATION'), ('1', 'LITERAL')]
| | | | [43:9] BINARY_OPERATOR: [no spelling] (TypeKind.BOOL: bool) [3 tokens] [('x', 'IDENTIFIER'), ('>=', 'PUNCTUATION'), ('z', 'IDENTIFIER')]
| | | | | [43:9] UNEXPOSED_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | | | [43:9] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | | [43:14] UNEXPOSED_EXPR: z 'z' (TypeKind.INT: int) [1 tokens] [('z', 'IDENTIFIER')]
| | | | | | [43:14] DECL_REF_EXPR: z 'z' (TypeKind.INT: int) [1 tokens] [('z', 'IDENTIFIER')]
| | | | [43:19] BINARY_OPERATOR: [no spelling] (TypeKind.BOOL: bool) [3 tokens] [('x', 'IDENTIFIER'), ('<', 'PUNCTUATION'), ('1', 'LITERAL')]
| | | | | [43:19] UNEXPOSED_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | | | [43:19] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | | [43:23] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('1', 'LITERAL')]
| | [44:5] BINARY_OPERATOR: [no spelling] (TypeKind.BOOL: bool) [9 tokens] [('b', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('z', 'IDENTIFIER'), ('<=', 'PUNCTUATION'), ('y', 'IDENTIFIER'), ('||', 'PUNCTUATION'), ('x', 'IDENTIFIER'), ('==', 'PUNCTUATION'), ('0', 'LITERAL')]
| | | [44:5] DECL_REF_EXPR: b 'b' (TypeKind.BOOL: bool) [1 tokens] [('b', 'IDENTIFIER')]
| | | [44:9] BINARY_OPERATOR: [no spelling] (TypeKind.BOOL: bool) [7 tokens] [('z', 'IDENTIFIER'), ('<=', 'PUNCTUATION'), ('y', 'IDENTIFIER'), ('||', 'PUNCTUATION'), ('x', 'IDENTIFIER'), ('==', 'PUNCTUATION'), ('0', 'LITERAL')]
| | | | [44:9] BINARY_OPERATOR: [no spelling] (TypeKind.BOOL: bool) [3 tokens] [('z', 'IDENTIFIER'), ('<=', 'PUNCTUATION'), ('y', 'IDENTIFIER')]
| | | | | [44:9] UNEXPOSED_EXPR: z 'z' (TypeKind.INT: int) [1 tokens] [('z', 'IDENTIFIER')]
| | | | | | [44:9] DECL_REF_EXPR: z 'z' (TypeKind.INT: int) [1 tokens] [('z', 'IDENTIFIER')]
| | | | | [44:14] UNEXPOSED_EXPR: y 'y' (TypeKind.INT: int) [1 tokens] [('y', 'IDENTIFIER')]
| | | | | | [44:14] DECL_REF_EXPR: y 'y' (TypeKind.INT: int) [1 tokens] [('y', 'IDENTIFIER')]
| | | | [44:19] BINARY_OPERATOR: [no spelling] (TypeKind.BOOL: bool) [3 tokens] [('x', 'IDENTIFIER'), ('==', 'PUNCTUATION'), ('0', 'LITERAL')]
| | | | | [44:19] UNEXPOSED_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | | | [44:19] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | | [44:24] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('0', 'LITERAL')]
| | [46:5] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [7 tokens] [('z', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('a', 'IDENTIFIER'), ('?', 'PUNCTUATION'), ('1', 'LITERAL'), (':', 'PUNCTUATION'), ('0', 'LITERAL')]
| | | [46:5] DECL_REF_EXPR: z 'z' (TypeKind.INT: int) [1 tokens] [('z', 'IDENTIFIER')]
| | | [46:9] CONDITIONAL_OPERATOR: [no spelling] (TypeKind.INT: int) [5 tokens] [('a', 'IDENTIFIER'), ('?', 'PUNCTUATION'), ('1', 'LITERAL'), (':', 'PUNCTUATION'), ('0', 'LITERAL')]
| | | | [46:9] UNEXPOSED_EXPR: a 'a' (TypeKind.BOOL: bool) [1 tokens] [('a', 'IDENTIFIER')]
| | | | | [46:9] DECL_REF_EXPR: a 'a' (TypeKind.BOOL: bool) [1 tokens] [('a', 'IDENTIFIER')]
| | | | [46:13] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('1', 'LITERAL')]
| | | | [46:17] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('0', 'LITERAL')]
| | [48:5] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [11 tokens]
| | | [48:5] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | [48:9] PAREN_EXPR: [no spelling] (TypeKind.INT: int) [9 tokens] [('(', 'PUNCTUATION'), ('y', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('3', 'LITERAL'), (',', 'PUNCTUATION'), ('y', 'IDENTIFIER'), ('+', 'PUNCTUATION'), ('2', 'LITERAL'), (')', 'PUNCTUATION')]
| | | | [48:10] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [7 tokens] [('y', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('3', 'LITERAL'), (',', 'PUNCTUATION'), ('y', 'IDENTIFIER'), ('+', 'PUNCTUATION'), ('2', 'LITERAL')]
| | | | | [48:10] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [3 tokens] [('y', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('3', 'LITERAL')]
| | | | | | [48:10] DECL_REF_EXPR: y 'y' (TypeKind.INT: int) [1 tokens] [('y', 'IDENTIFIER')]
| | | | | | [48:12] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('3', 'LITERAL')]
| | | | | [48:15] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [3 tokens] [('y', 'IDENTIFIER'), ('+', 'PUNCTUATION'), ('2', 'LITERAL')]
| | | | | | [48:15] UNEXPOSED_EXPR: y 'y' (TypeKind.INT: int) [1 tokens] [('y', 'IDENTIFIER')]
| | | | | | | [48:15] DECL_REF_EXPR: y 'y' (TypeKind.INT: int) [1 tokens] [('y', 'IDENTIFIER')]
| | | | | | [48:17] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('2', 'LITERAL')]
| | [50:5] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [5 tokens] [('x', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('x', 'IDENTIFIER'), ('&', 'PUNCTUATION'), ('100', 'LITERAL')]
| | | [50:5] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | [50:9] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [3 tokens] [('x', 'IDENTIFIER'), ('&', 'PUNCTUATION'), ('100', 'LITERAL')]
| | | | [50:9] UNEXPOSED_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | | [50:9] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | [50:13] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('100', 'LITERAL')]
| | [51:5] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [5 tokens] [('x', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('x', 'IDENTIFIER'), ('|', 'PUNCTUATION'), ('24', 'LITERAL')]
| | | [51:5] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | [51:9] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [3 tokens] [('x', 'IDENTIFIER'), ('|', 'PUNCTUATION'), ('24', 'LITERAL')]
| | | | [51:9] UNEXPOSED_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | | [51:9] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | [51:13] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('24', 'LITERAL')]
| | [52:5] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [5 tokens] [('x', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('x', 'IDENTIFIER'), ('^', 'PUNCTUATION'), ('316', 'LITERAL')]
| | | [52:5] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | [52:9] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [3 tokens] [('x', 'IDENTIFIER'), ('^', 'PUNCTUATION'), ('316', 'LITERAL')]
| | | | [52:9] UNEXPOSED_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | | [52:9] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | [52:13] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('316', 'LITERAL')]
| | [53:5] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [4 tokens] [('x', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('~', 'PUNCTUATION'), ('x', 'IDENTIFIER')]
| | | [53:5] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | [53:9] UNARY_OPERATOR: [no spelling] (TypeKind.INT: int) [2 tokens] [('~', 'PUNCTUATION'), ('x', 'IDENTIFIER')]
| | | | [53:10] UNEXPOSED_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | | [53:10] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | [54:5] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [5 tokens] [('y', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('z', 'IDENTIFIER'), ('<<', 'PUNCTUATION'), ('2', 'LITERAL')]
| | | [54:5] DECL_REF_EXPR: y 'y' (TypeKind.INT: int) [1 tokens] [('y', 'IDENTIFIER')]
| | | [54:9] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [3 tokens] [('z', 'IDENTIFIER'), ('<<', 'PUNCTUATION'), ('2', 'LITERAL')]
| | | | [54:9] UNEXPOSED_EXPR: z 'z' (TypeKind.INT: int) [1 tokens] [('z', 'IDENTIFIER')]
| | | | | [54:9] DECL_REF_EXPR: z 'z' (TypeKind.INT: int) [1 tokens] [('z', 'IDENTIFIER')]
| | | | [54:14] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('2', 'LITERAL')]
| | [55:5] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [5 tokens] [('y', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('y', 'IDENTIFIER'), ('>>', 'PUNCTUATION'), ('1', 'LITERAL')]
| | | [55:5] DECL_REF_EXPR: y 'y' (TypeKind.INT: int) [1 tokens] [('y', 'IDENTIFIER')]
| | | [55:9] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [3 tokens] [('y', 'IDENTIFIER'), ('>>', 'PUNCTUATION'), ('1', 'LITERAL')]
| | | | [55:9] UNEXPOSED_EXPR: y 'y' (TypeKind.INT: int) [1 tokens] [('y', 'IDENTIFIER')]
| | | | | [55:9] DECL_REF_EXPR: y 'y' (TypeKind.INT: int) [1 tokens] [('y', 'IDENTIFIER')]
| | | | [55:14] INTEGER_LITERAL: [no spelling] (TypeKind.INT: int) [1 tokens] [('1', 'LITERAL')]
| | [57:5] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [6 tokens] [('z', 'IDENTIFIER'), ('=', 'PUNCTUATION'), ('(', 'PUNCTUATION'), ('int', 'KEYWORD'), (')', 'PUNCTUATION'), ('3.14', 'LITERAL')]
| | | [57:5] DECL_REF_EXPR: z 'z' (TypeKind.INT: int) [1 tokens] [('z', 'IDENTIFIER')]
| | | [57:9] CSTYLE_CAST_EXPR: [no spelling] (TypeKind.INT: int) [4 tokens] [('(', 'PUNCTUATION'), ('int', 'KEYWORD'), (')', 'PUNCTUATION'), ('3.14', 'LITERAL')]
| | | | [57:15] UNEXPOSED_EXPR: [no spelling] (TypeKind.INT: int) [1 tokens] [('3.14', 'LITERAL')]
| | | | | [57:15] FLOATING_LITERAL: [no spelling] (TypeKind.DOUBLE: double) [1 tokens] [('3.14', 'LITERAL')]
| | [59:5] RETURN_STMT: [no spelling] [6 tokens] [('return', 'KEYWORD'), ('x', 'IDENTIFIER'), ('+', 'PUNCTUATION'), ('y', 'IDENTIFIER'), ('*', 'PUNCTUATION'), ('z', 'IDENTIFIER')]
| | | [59:12] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [5 tokens] [('x', 'IDENTIFIER'), ('+', 'PUNCTUATION'), ('y', 'IDENTIFIER'), ('*', 'PUNCTUATION'), ('z', 'IDENTIFIER')]
| | | | [59:12] UNEXPOSED_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | | [59:12] DECL_REF_EXPR: x 'x' (TypeKind.INT: int) [1 tokens] [('x', 'IDENTIFIER')]
| | | | [59:16] BINARY_OPERATOR: [no spelling] (TypeKind.INT: int) [3 tokens] [('y', 'IDENTIFIER'), ('*', 'PUNCTUATION'), ('z', 'IDENTIFIER')]
| | | | | [59:16] UNEXPOSED_EXPR: y 'y' (TypeKind.INT: int) [1 tokens] [('y', 'IDENTIFIER')]
| | | | | | [59:16] DECL_REF_EXPR: y 'y' (TypeKind.INT: int) [1 tokens] [('y', 'IDENTIFIER')]
| | | | | [59:20] UNEXPOSED_EXPR: z 'z' (TypeKind.INT: int) [1 tokens] [('z', 'IDENTIFIER')]
| | | | | | [59:20] DECL_REF_EXPR: z 'z' (TypeKind.INT: int) [1 tokens] [('z', 'IDENTIFIER')]